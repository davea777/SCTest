HISTORY
Arrows.APP - CREATE (:Customer)-[:OWNS]->(:Account)-[:PURCHASED]->(:TICKER)-[:DAILYCLOSE]->(:DAILYCLOSE)<-[:DAILYCLOSE]-(:FUNDS)<-[:FUNDSHOLDING]-(n7),(n6)-[:PURCHASED]->(n8)
Helpful commands: ( MATCH (n:XX) DETACH DELETE N)


//1A   // EDIT - Each NODE has customer name
LOAD CSV WITH HEADERS FROM 'file:///customers.csv' AS row
CREATE (c:Customer {name: row.owner_name})
SET c += row



//1B  //EDIT - Each node has account name

LOAD CSV WITH HEADERS FROM 'file:///accounts.csv' AS row
CREATE (:Account {name: row.customer_id,
account_id : row.account_id,
customer_id : row.customer_id,
account_type : row.account_type,
channel:row.channel })

 

//1C
LOAD CSV WITH HEADERS FROM 'file:///accounts.csv' AS row
MATCH (account : Account {account_id : row.account_id })
MATCH (customer:Customer) WHERE customer.customer_id = row.customer_id
CREATE (customer)-[:HAS]->(account)


//1D - LOAD FUNDS DATA   - Add fund Node has name

LOAD CSV WITH HEADERS FROM 'file:///funds.csv' AS row
CREATE (:Funds {name: row.fund_name
fund_name : row.fund_name,
ticker : row.ticker,
assets : row.assets,
manager : row.manager,
inception_date : row.inception_date,
company : row.company,
expense_ratio : row.expense_ratio })


//1D LOAD account_purchases (Node Name account_id

LOAD CSV WITH HEADERS FROM 'file:///account_purchases.csv' AS row
CREATE (:Acctpurchases {name: row.account_id,
account_id : row.account_id,
ticker : row.ticker,
number_of_shares : row.number_of_shares,
purchase_date : row.purchase_date })




//1E Establish relationships between Accounts and Funds
*Relationship is shown on account_purchases.csv - ** account_id OWNS Ticker, number_of_shares and purchase_date
Link Account purchases(account_id and ticker) with accounts

Link Accounts(account_id, ticker) with Funds (ticker)

LOAD CSV WITH HEADERS FROM 'file:///accounts.csv' AS row
MATCH (account : Account {account_id : row.account_id })
MATCH (AcctPurchases) WHERE account.account_id = row.account_id
CREATE (account)-[:HAS]->(AcctPurchases)



//1F - Load Ticker data
//* stock_ticker.csv (Ticker/company), 

LOAD CSV WITH HEADERS FROM 'file:///stock_ticker.csv' AS row
CREATE (:Ticker {name: row.ticker,
ticker : row.ticker,
holding_company : row.holding_company })


//1G Establish relationships for Holdings - e.g. (account)-[:PURCHASED]->(Stock)
//(account)-[:PURCHASED]->(Fund)  - include quantity & purchase date on relationship.
//Make sure fund_holding data is loaded.

LOAD CSV WITH HEADERS FROM 'file:///fund_holdings.csv' AS row
CREATE (:FundsHolding {name: row.holding_company,
fund_ticker : row.fund_ticker,
holding_company : row.holding_company,
holding_ticker : row.holding_ticker,
percentage : row.percentage })



*Match  return (check results)


**Load Funds data

**LOAD DAILY CLOSE
LOAD CSV WITH HEADERS FROM 'file:///daily_close.csv' AS row
CREATE (d:dailyclose {name: row.ticker})
SET d += row


**CREATE
*** Create Relationships
CREATE (Stock)
CREATE (account)-[:PURCHASED]->(Stock)
CREATE (account)-[:PURCHASED]->(Fund)
CREATE (Ticker)-[:MEMBER of]->(Stock)

**Establish relationships for Holdings.

LOAD CSV WITH HEADERS FROM 'file:///accounts.csv' AS row
MATCH (account : Account {account_id : row.account_id })
MATCH (fund:Fund) WHERE fund.fund_name = row.fund_name
CREATE (account)-[:PURCHASED]->(STOCK)

***Link accounts and Funds

LOAD CSV WITH HEADERS FROM 'file:///funds.csv' AS row
MATCH (account : Account {account_id : row.account_id })
MATCH (funds:Funds) WHERE fund.fund_name = row.fund_name
CREATE (funds)-[:HOLDS]->(account)

MERGE (p)

CREATE (fund)-[:HOLDS]->(account)






Questions/ Answers
2a - Ticker MSFT, account_id
123457 - Alex Jones
923457 - Ed Chowder  
7009001 - Soham Dipkar

2b - Ticker MSFT, (Fund)holding
VDIGX holds MSFT - Vanguard Dividend Growth Fund - held 3  x Accounts
VRNIX holds MSSFT - Vanguard Russell 1000 Index Fund - held 4 x Accounts
VFIAX holds MSFT - Vanguard 500 Index Fund - held 5 x Accounts

2c - 
Match (fund_holding) fund_ticker
Match (ticker) where

2d - 
Match (n:Customer) 
WHERE owner_namd <>"Ed Chowder"
RETURN Customer

MATCH (customer:Customer {name: "Ed Chowder"})-[:HAS]->(account:Account)-[:HAS_FUND]->(fund:Fund)
WHERE fund.close_date = date("2018-05-15")
WITH fund.name AS fund_name, SUM(dailyclose) AS total_holdings
ORDER BY fund_name ASC
RETURN fund_name, total_holdings


3
3a)

3b)

3c)
Interesting to see how we can bring togehter data to understand a relationship. Example: Being able to use a cusotmer ID to uncover a account ID ,then expanding
that out to understnad stock purchase as an individual, and then through funds/mutal holdings has many applications for uncovering relationships and connections.
Visulising graph makes complex queries easier to understand
Being able to form many types of relationships.
